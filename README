-------------------------------------------------------------------------------
            ___ _____ _____ _____ _   _   ___  _________ _____ _____           
           / __|_   _|  _  |_   _| | | | / __||  _   _  |  _  |  _  |          
           \ \   | | | |_| | | | | | | | \ \  | | | | | | | | | | | |          
           _\ \  | | |  _  | | | | |_| | _\ \ | | | | | | |_| | | | |          
          |___/  |_| |_| |_| |_| |_____||___/ |_| |_| |_|_____|_| |_|          
-------------------------------------------------------------------------------
Visualizes status of robot including computer vision targets, sonar targets, 
mission planner targets, thruster heatmaps, 3D position, 3D velocity, and a
model of the robot alongside 3D rotation information.
-------------------------------------------------------------------------------
Dependencies:
  -matplotlib
  -numpy
  -Python (2.7, 3.4, and 3.5 officially supported)
  -PythonSharedBuffers
  -DistributedSharedMemory (In submodule)
-------------------------------------------------------------------------------
Setup and Running:
1. If only Demo is needed, look at Running Demo.
2. If setting up for RoboSub use, look at Live Setup (harder to set up)
  
  Live Setup:
    Setting up DSM:
      sudo apt-get install libboost1.55-all-dev
      sudo apt-get install python3.4-dev
      sudo ln -s /usr/lib/arm-linux-gnueabihf/libboost_python-py34.a /usr/lib/arm-linux-gnueabihf/libboost_python3.a
      sudo ln -s /usr/lib/arm-linux-gnueabihf/libboost_python-py34.so /usr/lib/arm-linux-gnueabihf/libboost_python3.so
      git submodule init
      git submodule update
      cd DistributedSharedMemory
      mkdir build
      cd build
      git submodule init
      git submodule update
      cmake ..
      make
      cd ../..  
    Running in Live mode (monitors actual DSM buffers):
      In one terminal:
        python3 statusmon.py
      In another terminal:
        cd DistributedSharedMemory/build
	./DSMServer 47

  Running Demo (generates random data to display):
    python3 statusmonDemo.py
    -- OR --
    If DSM is built, the following option is also available
      In one terminal, run:
        python3 statusmon.py -m demo
      In another terminal, run:
        cd DistributedSharedMemory/build
	./DSMServer 47
  
  Usage:
    python3 statusmon.py [-m] <mode> [-r] | [-h]

  Help:
    python3 statusmon.py -h
-------------------------------------------------------------------------------
Changelog:
09-06-16
  -Added statusmonDemo.py which does not require DSM to run for extra
   simplicity. It always runs in Demo mode even if mode is manually set.
  -Statusmon in demo mode will also no longer initialize DSM for faster
   startup time, although does import DSM so DSM must still be built properly.
  -Minor change in usage statement to make it more accurate.

07-24-16
  -Statusmon now accepts command line args for setting status mode (demo or
   live), initializing data (0 or random), and displaying help.
  -Demostatusmon.py is now unneeded since its functionality has been merged 
   back into statusmon.py, so it has been removed.

07-23-16
  -Statusmon working with DSM servers/buffers, can successfully read from
   remote buffers and display data accordingly
  -Made much more modifiable with run constants for quick changes
  -Demo version can now be used to test functionality by plugging random data
   into the real version's animations.

07-22-16
  -Separated statusmon into demo and run configurations
  -Buffer support added, successfully reads whether buffers are active and gets
   data from buffers, displays data.

07-21-16
  -All subplots ready to accept input from buffers
  -Cube and front face arrow are drawn on orientation 3D subplot
  -Position of orientation subplot and position subplot have been switched

07-20-16
  -Polar graph near complete, just need to grab values from buffer, then
   implement coloring and marker sizes based on depth and confidence.
  -Work was started on position graph, other lines can be plotted similarly to
   first one.

07-17-16
  -Began working with all the various layers in the package to lay out the
   interface, change colors/styles, and plot/annotate data
  -TODO ran into problem with plotting data on polar graph, wiped out half of
   the axes.
